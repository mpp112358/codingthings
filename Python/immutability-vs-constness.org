#+title: Immutability Vs Constness

* Immutable objects in Python

Data is represented by objects or by relations between objects in Python (actually, because code is considered data, it's also modeled by objects).

*An object has an identity, a type and a value.*

An object's identity never changes once the object is created. It can be thought of as the object's address in memory.

The type of an object determines its possible values and the operations allowed on the object. The object's type is also unchangeable.

So, the object's identity cannot change, and the object's type cannot change either. But, what about its value?

Some objects allow their value to change, and others don't. The first ones are called /mutable/, while the second ones are called /immutable/.

*The mutability of an object is determined by its type.*

For example, integers, floats and strings are immutable. I know this might sound strange to someone coming from C-like languages. But to better understand it, we need to know what is a variable in Python: it's just a name assigned to an object in memory. Assignment to a name that points to an immutable object doesn't change the object's value (that's not possible). It just changes to which object the label refers to.

For example:

#+begin_src python
>>> x = 1 # A new integer (immutable) object is created with value 1, and 'x' points to it.
>>> y = x # 'y' is made to point to the object with value 1 created in the previous statement.
>>> x = 2 # A new integer (immutable) object is created with value 2, and 'x' is bound to it.
>>> print(y)
1 # 'y' is still pointing to the first integer object created, with value 1.
>>> print(x)
2 # 'x' points to the new integer object created with value 2.
#+end_src

The key idea here is that assignment of an immutable object will just move the label to another object (maybe, a newly created one, like in the example above), leaving the first object untouched. Or, to put it another way, every value of an immutable type used in a program will lead to the creation of a new object of that type with that value: if you use integer values 1, 2 and 3, you will have three integer objects with those respective values. The assignment in the third statement of the example above seems to change the value of some object, but it's actually creating a new object and binding the name ~x~ to it. This means that, if ~y~ weren't assigned to the object bound to ~x~ in the second statement, the object with value ~1~ created in the first statement would become inaccessible. On the one hand, because there is a symbol to refer to that value, that's not a problem, because if another name is bound to that value, the object can be reused. Otherwise, the object can be removed from memory by the garbage collector.

#+begin_src python
>>> x = 1
>>> print(id(x))
9766760
>>> x = 2
>>> print(id(x))
976679 # Now, 'x' points to a different object (different identity).
>>> y = 2
>>> print(id(y))
9766792 #'y' points to the same object as 'x' (because we assigned the same value).
#+end_src

*There are atomic and not atomic types in Python.* Atomic types have /indivisible/ values: they can only be referred to as a whole. For example, integers are atomic. Not atomic types have /compound/ values: their values are made of parts (or elements) that can be referred to individually. For example, /list/ is a compound type. Objects of that type contain lists of values of other types. You can perform operations on the list as a whole (like, getting its length), or on an individual element of the list.

#+begin_src python
>>> x = 1 # 1 is an atomic value: no parts to be referred to. Integer is an atomic type.
>>> p = [2, 3, 5, 7] # [2, 3, 5, 7] is a compound value. Lists have elements.
>>> len(p) # We can operate on the object's value as a whole (get the number of items).
4 # p's number of elements.
>>> p[0] = 1 # We can access elements of the list, individually.
>>> print(p)
[1, 3, 5, 7]
#+end_src

*All atomic types in Python are immutable.*

Things get more complicated for compound types. Some of them are immutable and some are mutable. For example, lists are mutable and strings are immutable:

#+begin_src python
>>> p = [2, 3, 5, 7]
>>> p[0] = 1 # Lists are mutable: we can change its elements.
>>> print(p)
[1, 3, 5, 7]
>>> t = "Hello"
>>> print(t)
Hello
>>> len(t)
5
>>> t[0] = "h" # Strings are immutable: we cannot change its elements.
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'str' object does not support item assignment
#+end_src

We cannot modify one character of the string, because strings are immutable. But, remember that the variables are just labels bound to objects, and we can bind the name to a different string:

#+begin_src python
>>> print(t)
Hello
>>> print(id(t))
139640457390256
>>> t = "Goodbye" # We are not changing the value of an object, but creating a new one.
>>> print(t)
Goodbye
>>> print(id(t))
139640456749408 # It's a different object. Now, we have to string objects in memory.
#+end_src

Because objects of a compound type can be mutable or immutable, and they contain objects of other types, we can have an immutable type that contains immutable objects, an immutable object that contains mutable objects, a mutable object that contains immutable objects, and a mutable object that contains mutable objects. We know that integers are immutable, strings are immutable, and lists are mutable. We'll add that tuples are immutable, and dictionaries are mutable. Let's build a tuple of integers (immutable container of immutable objects), a tuple of lists (immutable container of mutable objects), a list of strings (mutable container of immutable objects) and a list of dictionaries (mutable container of mutable objects). Let's see how each one of those work.

Let's start with an immutable container of immutable objects:

#+begin_src python
>>> imim = (1, 2, 3) # Immutable container of immutable objects.
>>> print(id(imim))
139640455395456
>>> imim[0] = 4 # It's immutable: we cannot change an element.
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'tuple' object does not support item assignment
>>> imim = (4, 5, 6) # Even though it's immutable, we can bind the name to another object.
>>> print(id(imim))
139640455396288 # Now, 'imim' is bound to a different object (different id).
#+end_src

Now, let's see what happens with an immutable container of mutable objects:

#+begin_src python
>>> immu = ([1, 2], [2, 4], [3, 8], [4, 9]) # Immutable container of mutable objects.
>>> print(immu[3])
[4, 9]
>>> print(id(immu[3]))
139640455509440 # This is the id of the last element of the tuple. This cannot change.
>>> immu[3] = [4, 16] # We cannot change an element of the tuple, because it's immutable.
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'tuple' object does not support item assignment
>>> immu[3][1] = 16 # But can change an element of the list (which is an element of the tuple).
>>> print(immu) # The last element has change one of its elements.
([1, 2], [2, 4], [3, 8], [4, 16])
>>> print(id(immu[3]))
139640455509440 # The last element of the tuple is the same object. But it has change its value.
#+end_src

We'll continue with a mutable container of immutable objects:

#+begin_src python
>>> muim = ["Hello", "Hallo", "Hola"] # Mutable container of immutable objects.
>>> print(id(muim[0]))
139640455595328 # This is the id of the first element of the list.
>>> muim[0][0] = "h" # We cannot change an element of the first element of the list.
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'str' object does not support item assignment
>>> muim[0] = "hello" # But we can change the whole first element (the list is mutable).
>>> print(muim)
['hello', 'Hallo', 'Hola']
>>> print(id(muim[0]))
139640458328608 # But, the id of the first element has changed, because it's a new object.
#+end_src

Finally, we'll explore a mutable container of mutable objects:

#+begin_src python
>>> mumu = [{"x": 1, "y": 2}, {"x": 2, "y": 4}, {"x": 3, "y": 8}]
>>> mumu[0] = {"x": 0, "y": 1} # We can change an element.
>>> print(mumu)
[{'x': 0, 'y': 1}, {'x': 2, 'y': 4}, {'x': 3, 'y': 8}]
>>> mumu[0]['x'] = 9 # We can change an element of an element as well.
>>> print(mumu)
[{'x': 9, 'y': 1}, {'x': 2, 'y': 4}, {'x': 3, 'y': 8}]
#+end_src

Generally speaking, I reckon we may say that mutability is a rare thing in Python. Actually, you can only change elements of mutable objects. Don't forget that assignment to a name is just rebinding the name to a new object:

#+begin_src python
>>> mu = [1, 2, 3]
>>> print(id(mu))
139640455499008
>>> mu = [4, 5, 6]
>>> print(id(mu))
139640455509568
#+end_src

The expression ~[4, 5, 6]~ creates a new object of type list, and the assignment binds the name ~mu~ to that new object, as we can see with the id's.
